#include "regressioncontroller.h"

RegressionController::RegressionController()
{

}

RegressionController::RegressionController(double percentualePeso,
        double percentualeLineareA,
        double percentualeLineareB,
        double percentualeGammaA,
        double percentualeGammaB,
        double *weights,
        int weightsSize,
        int *functionTypes,
        int functionTypesSize,
        Parameters *parameters,
        int parametersSize,
        int _sizeKernel,
        double *_kernel){

    this->percentualePeso = percentualePeso;
    this->percentualeLineareA = percentualeLineareA;
    this->percentualeLineareB = percentualeLineareB;
    this->percentualeGammaA = percentualeGammaA;
    this->percentualeGammaB = percentualeGammaB;

    this->weights = weights;
    this->weightsSize =weightsSize;
    this->functionTypes = functionTypes;
    this->functionTypesSize = functionTypesSize;
    this->parameters = parameters;
    this->parametersSize = parametersSize;

    this->sizeKernel=_sizeKernel;
    this->kernel = _kernel;
    this->numberProcessor=4;

}

double getHMed(double kernel[], int sizeKernel){
    double sum=0;
    for (int i = 0; i < sizeKernel; i++) {
        sum+=kernel[i];
    }
    return sum/sizeKernel;

}

double getHMax(double kernel[], int sizeKernel){
    double max=-1;
    for (int i = 0; i < sizeKernel; i++) {
        if(max< kernel[i])
            max = kernel[i];
    }
    return max;

}

void initAlreadyConsidered(double *&alreadyConsidered, int sizeKernel){
    for (int i = 0; i < sizeKernel; i++) {
        alreadyConsidered[i]=-1;
    }
}

void stampa(double array[], int sizeKernel){
    for (int i = 0; i < sizeKernel; i++) {
        cout << array[i] << " ";
    }
    cout << endl;
}
int getInterset(double kernel[],double *&alreadyConsidered,double *&alreadyConsideredTemp,double boundary, int sizeKernel){
    int count=0;
    for (int i = 0; i < sizeKernel; i++) {
        if(alreadyConsidered[i]==-1  && kernel[i] >= boundary){
            alreadyConsideredTemp[i]=kernel[i];
            alreadyConsidered[i]=kernel[i];
            count++;
        }
    }
    return count;
}

void getPoints(double *&a,std::vector< double> &xVec,std::vector< double> &yVec, int sizeKernel){


    double sum=0;
    double x=0;
    int count=0;
    for (int i = 0; i < sizeKernel-1; i++) {
        if(a[i]!=-1){
            if(a[i+1]==-1 && a[i-1] ==-1){
                //write << i+1 << "; " << a[i] << "; " << endl;
                xVec.push_back(i+1);
                yVec.push_back(a[i]);
                cout << " x = " << i+1 << " y = " << a[i] << endl;
            }else{
                sum+=a[i];
                x+=i;
                count++;
                if(a[i+1]==-1){
                    //write << (x/count)+1 << "; " << sum/count << "; " << endl;
                    xVec.push_back((x/count)+1);
                    yVec.push_back(sum/count);
                    cout << " x = " << (x/count)+1 << " y = " << sum/count << endl;
                    sum=0;
                    count=0;
                    x=0;
                }
            }
        }
    }


}


void RegressionController::startAlgorithm(){

    std::vector< double> x;
    std::vector< double> y;

    double hmed= getHMed(kernel,sizeKernel);
    double hmax = getHMax(kernel,sizeKernel);
    double hmed2= hmed/2;
    double hmedmax= (hmed+hmax)/2;

    cout << "hmax = " << hmax << endl;
    cout << "hmedmax = " << hmedmax << endl;
    cout << "hmed = "<< hmed << endl;
    cout << "hmed2 = " << hmed2 <<endl;

//    double alreadyConsideredHMax[SIZE];
//    double alreadyConsideredHMedMax[SIZE];
//    double alreadyConsideredHMed[SIZE];
//    double alreadyConsideredHMed2[SIZE];
//    double alreadyConsidered[SIZE];
      double *alreadyConsideredHMax = new double[sizeKernel];
      double *alreadyConsideredHMedMax= new double[sizeKernel];
      double *alreadyConsideredHMed= new double[sizeKernel];
      double *alreadyConsideredHMed2= new double[sizeKernel];
      double *alreadyConsidered= new double[sizeKernel];
    initAlreadyConsidered(alreadyConsidered,sizeKernel);
    initAlreadyConsidered(alreadyConsideredHMax,sizeKernel);
    initAlreadyConsidered(alreadyConsideredHMedMax,sizeKernel);
    initAlreadyConsidered(alreadyConsideredHMed,sizeKernel);
    initAlreadyConsidered(alreadyConsideredHMed2,sizeKernel);
    int count = getInterset(kernel,alreadyConsidered,alreadyConsideredHMax,hmax,sizeKernel);
    cout << "ho trovato " << count << " barre superiori a " << hmax << endl;
    count=getInterset(kernel,alreadyConsidered,alreadyConsideredHMedMax,hmedmax,sizeKernel);
    cout << "ho trovato " << count << " barre superiori a " << hmedmax << endl;
    count=getInterset(kernel,alreadyConsidered,alreadyConsideredHMed,hmed,sizeKernel);
    cout << "ho trovato " << count << " barre superiori a " << hmed << endl;
    count=getInterset(kernel,alreadyConsidered,alreadyConsideredHMed2,hmed2,sizeKernel);
    cout << "ho trovato " << count << " barre superiori a " << hmed2 << endl;
    //stampa(alreadyConsideredHMax);
    //stampa(alreadyConsideredHMedMax);
    //stampa(alreadyConsideredHMed);
    //stampa(alreadyConsideredHMed2);
    cout << " points from hmax" << endl;
    getPoints(alreadyConsideredHMax,x,y,sizeKernel);
    cout << " points from hmedhmax" << endl;
    getPoints(alreadyConsideredHMedMax,x,y,sizeKernel);
    cout << " points from hmed" << endl;
    getPoints(alreadyConsideredHMed,x,y,sizeKernel);
    cout << " points from hmed2" << endl;
    getPoints(alreadyConsideredHMed2,x,y,sizeKernel);
    for (int i = 0; i < x.size(); i++) {
        cout << x[i] <<" " << y[i] << endl;
    }


    int alto;
    for (alto = x.size() - 1; alto > 0; alto-- )
    {
        for (int i=0; i<alto; i++)
        {
            if (x[i]>x[i+1]) /* sostituire ">" con "<" per avere un ordinamento decrescente */
            {
                double tmp = x[i];
                x[i] = x[i+1];
                x[i+1] = tmp;
                double tmp2 = y[i];
                y[i] = y[i+1];
                y[i+1] = tmp2;

            }
        }
    }

    for (int i = 0; i < x.size(); i++) {
        cout << x[i] <<" " << y[i] << endl;
    }

    time_t start_time, end_time;
    this->start=true;
    int argc=1;
    char **input= (char**)malloc(sizeof(char*) * 1);
    input[0]= (char*)malloc(sizeof(char)*1);
    input[0]=(char*) 'a';
    try
    {
        #ifdef _OPENMP
          omp_set_num_threads( numberProcessor );
        #endif // !_OPENMP
        eoParser parser(argc,input);  // for user-parameter readi ng
        int maxGen = 15000;
        // parser.setORcreateParam(eoParamParamType("Sequential(ordered)"), "selection", "Selection: DetTour(T), StochTour(t), Roulette, Ranking(p,e) or Sequential(ordered/unordered)", 'S', "Evolution Engine");
        //        parser.setORcreateParam(eoParamParamType("ElitistReplacement(8)"), "replacement", "Replacement: Comma, Plus or EPTour(T), SSGAWorst, SSGADet(T), SSGAStoch(t)", 'R', "Evolution Engine");
        parser.setORcreateParam(unsigned(500), "popSize", "Population Size", 'P', "Evolution Engine");
        parser.setORcreateParam(unsigned(maxGen), "maxGen", "Maximum number of generations () = none)",'G',"Stopping criterion");
        //          parser.setORcreateParam(relRateCrossover, "cross1Rate", "Relative rate for crossover 1", '1', "Variation Operators").value();
        //          parser.setORcreateParam(relRateMutation, "mut1Rate", "Relative rate for mutation 1", '1', "Variation Operators").value();
        parser.setORcreateParam(0.8, "pCross", "Probability of Crossover", 'C', "Variation Operators" );
        parser.setORcreateParam(0.3, "pMut", "Probability of Mutation", 'M', "Variation Operators" );


        eoState state;    // keeps all things allocated

        // The fitness
        //////////////
        eoOneMaxEvalFunc<Individual> plainEval(x,y)/* (varType  _anyVariable) */;
        // turn that object into an evaluation counter
        eoEvalFuncCounter<Individual> eval(plainEval);

        // the genotype - through a genotype initializer
        eoInit<Individual>& init = do_make_genotype(parser, state, weights,weightsSize, functionTypes, functionTypesSize, parameters, parametersSize, Individual());

        // Build the variation operator (any seq/prop construct)
        eoGenOp<Individual>& op = do_make_op(parser, state, init);

        eoQuadOp<Individual> *cross = new eoOneMaxQuadCrossover<Individual> /* (varType  _anyVariable) */;
        eoMonOp<Individual> *mut = new eoOneMaxMutation<Individual>/* (varType  _anyVariable) */;



        //// Now the representation-independent things
        //
        // YOU SHOULD NOT NEED TO MODIFY ANYTHING BEYOND THIS POINT
        // unless you want to add specific statistics to the checkpoint
        //////////////////////////////////////////////

        // initialize the population
        // yes, this is representation indepedent once you have an eoInit
        eoPop<Individual>& pop   = do_make_pop(parser, state, init);
        QString savePath;
        eoGenContinueMy<Individual> * stop = new eoGenContinueMy<Individual>(savePath);
        // stopping criteria
        eoContinue<Individual> & term = do_make_continue_my(parser, state, eval,stop);
        // output
        eoCheckPoint<Individual> & checkpoint = do_make_checkpoint_my(parser,
                                                                      state,
                                                                      eval,
                                                                      term,
                                                                      qCustomPlotFitness,
                                                                      qCustomPlotRegression,
                                                                      progressBar,
                                                                      maxGen,
                                                                      currentMaximumFitness,
                                                                      absoluteMaximumFitness,
                                                                      currentAverageFitness,
                                                                      absoluteAverageFitness,
                                                                      update,
                                                                      x);
        // algorithm (need the operator!)
        //  eoAlgo<Individual>& ga = make_algo_scalar_my(parser, state, eval, checkpoint, op);
        eoAlgo<Individual>& ga = do_make_algo_scalar_my(parser, state, eval, checkpoint, *cross,0.7,*mut,0.3,60);

        ///// End of construction of the algorithm

        /////////////////////////////////////////
        // to be called AFTER all parameters have been read!!!
        make_help(parser);

        //// GO
        ///////
        // evaluate intial population AFTER help and status in case it takes time
        apply<Individual>(eval, pop);
        // if you want to print it out
        cout << "Initial Population\n";
        pop.sortedPrintOn(cout);
        cout << endl;

        do_run(ga, pop); // run the ga

        cout << "Final Population\n";
        pop.sortedPrintOn(cout);
        cout << endl;
        cout << "The Best" <<endl;
        pop.best_element().printOn(cout);

        cout <<  endl;

        for (int i = 0; i < x.size(); ++i) {
            cout << pop.best_element().getYCombinataConst(i) << endl;
        }


    }
    catch(exception& e)
    {
        cout << e.what() << endl;
    }
}

void RegressionController::run(){
    startAlgorithm();
}

QObject *RegressionController::getAbsoluteAverageFitness() const
{
    return absoluteAverageFitness;
}

void RegressionController::setAbsoluteAverageFitness(QObject *value)
{
    absoluteAverageFitness = value;
}

Update *RegressionController::getUpdate() const
{
    return update;
}

void RegressionController::setUpdate(Update *value)
{
    update = value;
}

int RegressionController::getNumberProcessor() const
{
    return numberProcessor;
}

void RegressionController::setNumberProcessor(int value)
{
    numberProcessor = value;
}

QObject *RegressionController::getAbsoluteAverageFitness() const
{
    return absoluteAverageFitness;
}

void RegressionController::setAbsoluteAverageFitness(QObject *value)
{
    absoluteAverageFitness = value;
}

QObject *RegressionController::getCurrentAverageFitness() const
{
    return currentAverageFitness;
}

void RegressionController::setCurrentAverageFitness(QObject *value)
{
    currentAverageFitness = value;
}

QObject *RegressionController::getAbsoluteMaximumFitness() const
{
    return absoluteMaximumFitness;
}

void RegressionController::setAbsoluteMaximumFitness(QObject *value)
{
    absoluteMaximumFitness = value;
}

QObject *RegressionController::getCurrentMaximumFitness() const
{
    return currentMaximumFitness;
}

void RegressionController::setCurrentMaximumFitness(QObject *value)
{
    currentMaximumFitness = value;
}

QObject *RegressionController::getProgressBar() const
{
    return progressBar;
}

void RegressionController::setProgressBar(QObject *value)
{
    progressBar = value;
}

CustomPlotItem *RegressionController::getQCustomPlotFitness() const
{
    return qCustomPlotFitness;
}

void RegressionController::setQCustomPlotFitness(CustomPlotItem *value)
{
    qCustomPlotFitness = value;
}
CustomPlotRegression *RegressionController::getQCustomPlotRegression() const
{
    return qCustomPlotRegression;
}

void RegressionController::getQCustomPlotRegression(CustomPlotRegression *value)
{
    qCustomPlotRegression = value;
}

void RegressionController::startThread(){
    QThread::start();
}
