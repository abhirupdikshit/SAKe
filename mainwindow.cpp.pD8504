#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "dialog.h"

std::vector<QThread *> MainWindow::threads;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->splitter->setStretchFactor(1,80);
    ui->treeWidget->setColumnCount(1);

    xmlmanager = new XMLManager();
    xmlmanager->setTreeview(ui->treeWidget);
    xmlmanager->ReadCalibrationProjectXML();
    connect(ui->treeWidget, SIGNAL(itemClicked(QTreeWidgetItem * , int )), this, SLOT(myClick(QTreeWidgetItem * , int )));
    ui->tabWidget_2->setTabsClosable(true);
    ui->tabWidget_2->removeTab(0);
    ui->tabWidget_2->removeTab(0);
}


void MainWindow::makeFitnessPlot(QCustomPlot * customPlot){

    // generate some data:
    QVector<double> x1( 0 ), y1( 0 );   // initialize with entries 0..100
    customPlot->addGraph();
    customPlot->graph( 0 )->setPen( QPen( Qt::red ) );
    //customPlot->graph( 0 )->setSelectedPen( QPen( Qt::blue, 2 ) );
    customPlot->graph( 0 )->setData( x1, y1 );

    customPlot->addGraph();
    customPlot->graph( 1 )->setPen( QPen( Qt::green ) );
    //customPlot->graph( 1 )->setSelectedPen( QPen( Qt::blue, 2 ) );
    customPlot->graph( 1 )->setData( x1, y1 );

    // give the axes some labels:
    customPlot->xAxis->setLabel( "Generation" );
    customPlot->yAxis->setLabel( "Fitness" );
    // set axes ranges, so we see all data:
    customPlot->xAxis->setRange( 0, 20 );
    customPlot->yAxis->setRange( 0, 1.05 );

    customPlot ->setInteractions( QCP::iRangeDrag | QCP::iRangeZoom | QCP::iSelectPlottables );
}

void MainWindow::makeMobilityFunctionPlot(QCustomPlot * customPlot,Rain * rain, int rain_size, Activation *activation, int activation_size){


    customPlot->setLocale(QLocale(QLocale::English, QLocale::UnitedKingdom));

    customPlot->addGraph();
    //
    customPlot->graph( 0 )->setPen( QPen( Qt::red,0.5 ) );
    //customPlot->graph( 0 )->setSelectedPen( QPen( Qt::blue, 2 ) );
    customPlot->yAxis->setRange( 0,20 );

    customPlot->addGraph();
    customPlot->graph(1)->setPen( QPen( Qt::gray ,0.5 ) );

    QVector<double> timetmp(rain_size),ytime(rain_size);
    for (int i=0; i<rain_size; i++){
        timetmp[i]=(ptime_from_tm(rain[i].getTime())-ptime(date(1970, Jan, 1))).total_seconds();
        ytime[i]=0;
    }

    customPlot->graph(1)->setData(timetmp, ytime);

    customPlot->addGraph();

    customPlot->graph(2)->setPen( QPen( Qt::blue ,0.5) );

    customPlot->graph(2)->setData(timetmp, ytime);

    customPlot->addGraph();
    customPlot->graph(3)->setPen( QPen( Qt::blue,0.5  ) );
    customPlot->graph(3)->setLineStyle(QCPGraph::lsNone);
    customPlot->graph(3)->setScatterStyle(QCPScatterStyle(QCPScatterStyle::ssCircle, 7));

//    QSharedPointer<QCPAxisTickerDateTime> dateTimeTicker(new QCPAxisTickerDateTime);
//    dateTimeTicker->setDateTimeSpec(Qt::UTC);
//    dateTimeTicker->setDateTimeFormat("dd-MMMM-yyyy");
//    customPlot->xAxis->setTicker(dateTimeTicker);
    customPlot->xAxis->setDateTimeFormat("dd\nMMMM\nyyyy");
    // set a more compact font size for bottom and left axis tick labels:
    customPlot->xAxis->setTickLabelFont(QFont(QFont().family(), 8));
    customPlot->yAxis->setTickLabelFont(QFont(QFont().family(), 8));
    // set a fixed tick-step to one tick per month:
    // customPlot->xAxis->setAutoTickStep(true);
    // customPlot->xAxis->setTickStep(2628000); // one month in seconds

    customPlot->xAxis->setLabel("Date");
    customPlot->yAxis->setLabel("y");


    ptime rain0 = ptime_from_tm(rain[0].getTime());
    ptime rainLast = ptime_from_tm(rain[rain_size-1].getTime());
    boost::posix_time::time_duration diff1 =(rain0-ptime(date(1970, Jan, 1)));
    boost::posix_time::time_duration diff2 = (rainLast-ptime(date(1970, Jan, 1)));
    //      cout << diff1.total_seconds()<< " "<<diff2.total_seconds() << endl;

    customPlot->xAxis->setRange(diff1.total_seconds(), diff2.total_seconds());
    customPlot->yAxis->setRange( 0, 20 );


    customPlot ->setInteractions( QCP::iRangeDrag | QCP::iRangeZoom | QCP::iSelectPlottables );
    //connect( customPlot, SIGNAL( plottableClick( QCPAbstractPlottable*, QMouseEvent* ) ), this, SLOT( graphClicked( QCPAbstractPlottable* ) ) );
    //connect(customPlot, SIGNAL(mousePress(QMouseEvent*)), this, SLOT(mousePress()));
    //connect(customPlot, SIGNAL(mouseWheel(QWheelEvent*)), this, SLOT(mouseWheel()));
    bool first = true;
    int graphnum=4;
    if(first){
        QVector<double> x(100), y(100);
        for (int j=0; j<activation_size; j++)
        {     tm a1=activation[j].getStart();
            //a1.tm_mday-=1;
            //cout << a1.tm_mday<< " "<<a1.tm_mon<< " "<<a1.tm_year << endl;
            tm a2=activation[j].getEnd();
            // cout << a1.tm_mday<< " "<<a1.tm_mon<< " "<<a1.tm_year<< endl;
            //a2.tm_mday+=2;
            for (int k=0; k<2; k++)
            {
                customPlot->addGraph();
                for (int i=0; i<(int)100; i++)
                {

                    if(k%2==0){

                        customPlot->graph( graphnum )->setPen( QPen( Qt::green) );

                        ptime tmp1 = ptime_from_tm(a1);
                        //ptime t11 = local_adj::utc_to_local(tmp1);

                        ptime utcepoch = ptime(date(1970, Jan, 1));
                        //ptime utcepoch1 = local_adj::utc_to_local(utcepoch);
                        //std::cout << (raindate-ptime(date(1970, Jan, 1))).total_milliseconds() << "\n";
                        boost::posix_time::time_duration diff =(tmp1-utcepoch);
                        //diff.total_milliseconds();
                        x[i] = diff.total_seconds();
                    }else{

                        customPlot->graph( graphnum )->setPen( QPen( Qt::blue) );
                        ptime tmp2 = ptime_from_tm(a2);
                        x[i] =(tmp2-ptime(date(1970, Jan, 1))).total_seconds();
                    }
                    y[i] = i;

                    //cout << x[i] << " "<< y[i]  << endl;
                }

                customPlot->graph(graphnum)->setData(x, y);
                // customPlot->graph(graphnum)->rescaleAxes(true);
                graphnum++;
            }


        }
        first =false;

    }

customPlot->replot();



}

void MainWindow::makeKernelPlot(QCustomPlot *customPlot)
{
    QCPBars* myBars = new QCPBars(customPlot->xAxis, customPlot->yAxis);
    //customPlot->addPlottable(myBars);
    // now we can modify properties of myBars:
    myBars->setName("Bars Series 1");
    customPlot->xAxis->setLabel("kernel");
    customPlot->yAxis->setLabel("y");
    customPlot->xAxis->setRange( 0,180 );
    customPlot->yAxis->setRange( -0.01,0.25 );
    customPlot ->setInteractions( QCP::iRangeDrag | QCP::iRangeZoom | QCP::iSelectPlottables );
}

void MainWindow::updateFitnessPlot(QCustomPlot *m_CustomPlot)
{

}

void MainWindow::updateMobPlot(int indexTab, Rain * rain, int rain_size, std::vector<double> Y, double YmMinVal, tm YmMinTime, double YmMinVal2, tm  YmMinTime2, std::vector<Ym> bests, std::vector<QCPItemText*> widgetArray,
std::vector<QCPItemLine*> arrowArray)
{
    QCustomPlot *m_CustomPlot = getPlotMobility(indexTab);
    if (m_CustomPlot)
     {
         m_CustomPlot->axisRect()->setRangeDrag(0);
         m_CustomPlot->axisRect()->setRangeZoom(0);

         std::sort(bests.begin(), bests.end(), [](Ym a, Ym b) { return a.getValue() > b.getValue(); });


         for(unsigned int i = 0; i < bests.size();i++){

             ptime bestTmp = ptime_from_tm(bests[i].getTime());
             boost::posix_time::time_duration diff =(bestTmp-ptime(date(1970, Jan, 1)));
             widgetArray[i]->position->setCoords(diff.total_seconds(), bests[i].getValue()+8);

             //DateTime time = DateTime(t.tm_year+1900, t.tm_mon+1, t.tm_day, t.tm_hour, t.tm_min, t.tm_sec);
             int year = bests[i].getTime().tm_year +1900;
             int mon = bests[i].getTime().tm_mon +1;
             int day = bests[i].getTime().tm_mday ;
             //std::cout << "year " << year << " mon " << mon << " day " << day << std::endl;
 ////            string year = std::to_string(1900);
 ////            string mon = bests[i].getTime().tm_mon+std::to_string(1);
 ////            string day = bests[i].getTime().day;

             QString a = QString("%1 %2 %3 - %4").arg(year).arg(mon).arg(day).arg(i+1);
             widgetArray[i]->setText(a);
             arrowArray[i]->end->setCoords(diff.total_seconds(), bests[i].getValue());
         }


         m_CustomPlot->graph( 0 )->setPen( QPen( Qt::red ) );
         //    qDebug() << "aggiorno" << endl;
         //m_CustomPlot->graph(0)->data()->clear();
         double max =-1;
         QVector<double> time(rain_size), value(rain_size);
         for (int i=0; i<rain_size; i++)
         {
             ptime raintime = ptime_from_tm(rain[i].getTime());
             boost::posix_time::time_duration diff =(raintime-ptime(date(1970, Jan, 1)));
             time[i] = diff.total_seconds();
             value[i]=Y[i];
             if(value[i] > max)
                 max=value[i];
         }

         m_CustomPlot->graph(0)->setData(time, value);

         QVector<double> ytime(rain_size),ytime2(rain_size);
         for (int i=0; i<rain_size; i++){
             //timetmp[i]=(ptime_from_tm(rain[i].getTime())-ptime(date(1970, Jan, 1))).total_seconds();
             ytime[i]=YmMinVal;//YmMin->getValue();
             ytime2[i]=YmMinVal2;//YmMin2->getValue();
         }
         m_CustomPlot->graph(1)->setData(time, ytime);
         m_CustomPlot->graph(2)->setData(time, ytime2);

         QVector<double> yPoint(2),xPoint(2);

         yPoint[0]=YmMinVal;//YmMin->getValue();
         yPoint[1]=YmMinVal2;//YmMin2->getValue();
         xPoint[0]=(ptime_from_tm(YmMinTime)-ptime(date(1970, Jan, 1))).total_seconds();
         xPoint[1]=(ptime_from_tm(YmMinTime2)-ptime(date(1970, Jan, 1))).total_seconds();
         m_CustomPlot->graph(3)->setData(xPoint, yPoint);
         m_CustomPlot->axisRect()->setRangeDrag(Qt::Horizontal|Qt::Vertical);
         m_CustomPlot->axisRect()->setRangeZoom(Qt::Horizontal|Qt::Vertical);
         //m_CustomPlot->setOpenGl(true);
         m_CustomPlot->replot();
     }
}

QCustomPlot* MainWindow::getPlotMobility(int indexTab){
    QTabWidget* tabs = (QTabWidget*)ui->tabWidget_2->widget(indexTab);
    QCustomPlot* tab = (QCustomPlot*)tabs->findChild<QCustomPlot*>("mobFunc");
   // QCustomPlot * m_CustomPlot = (QCustomPlot *) tab->widget(3);
    return tab;
}

void MainWindow::updateMobilityKernelPlot(QCustomPlot *customPlot)
{

}

void MainWindow::closeTab(int index)
{
    //ui->tabWidget_2->removeTab(index);
}

void MainWindow::pushBackThread(QThread *thread)
{
    MainWindow::threads.push_back(thread);

}

void MainWindow::addTab(QString name, Rain * rain, int rain_size, Activation *activation, int activation_size)
{
    QTabWidget * tabwidget = new QTabWidget();
    tabwidget->setObjectName("tabwidget");
    QCustomPlot * customPlot = new QCustomPlot();
    //customPlot->setOpenGl(true,64);
    QCustomPlot * mobFunc = new QCustomPlot();
    QCustomPlot * kerFunc = new QCustomPlot();
    ui->tabWidget_2->addTab(tabwidget, name);
    QWidget * tab1=ui->tabWidget_2->widget(ui->tabWidget_2->count()-1);
    QVBoxLayout * mainL = new QVBoxLayout();

    QSizePolicy spUp(QSizePolicy::Preferred, QSizePolicy::Preferred);
    spUp.setVerticalStretch(2);
    QVBoxLayout * vertical = new QVBoxLayout();
//    MainWindow::makeFitnessPlot(customPlot);
//    customPlot->setSizePolicy(spUp);
//    customPlot->setObjectName("fitFunc");
//    vertical->addWidget(customPlot);
    MainWindow::makeKernelPlot(kerFunc);
    //kerFunc->setSizePolicy(spUp);
    kerFunc->setObjectName("kerFunc");
    vertical->addWidget(kerFunc);
    MainWindow::makeMobilityFunctionPlot(mobFunc, rain,  rain_size, activation, activation_size);
    //mobFunc->setSizePolicy(spUp);

    mobFunc->setObjectName("mobFunc");
    //mobFunc->rescaleAxes();
    vertical->addWidget(mobFunc);


    //vertical->addStretch(vertical->sizeConstraint()*2);
    mainL->addLayout(vertical);
//    QGridLayout * grid = new QGridLayout();
//    QLabel * gen = new QLabel();
//    gen->setText("Number of Generation:");
//    grid->addWidget(gen,0,0);
//    QLabel * genNum = new QLabel();
//    genNum->setText("0");
//    grid->addWidget(genNum,0,1);

//    QLabel * curMaxFit = new QLabel();
//    curMaxFit->setText("Current Maximum Fitness:");
//    grid->addWidget(curMaxFit,1,0);
//    QLabel * curMaxFitNum = new QLabel();
//    curMaxFitNum->setText("0");
//    grid->addWidget(curMaxFitNum,1,1);

//    QLabel * AbsMaxFit = new QLabel();
//    AbsMaxFit->setText("Absolute Maximum Fitness:");
//    grid->addWidget(AbsMaxFit,1,2);
//    QLabel * AbsMaxFitNum = new QLabel();
//    AbsMaxFitNum->setText("0");
//    grid->addWidget(AbsMaxFitNum,1,3);

//    QLabel * curAveFit = new QLabel();
//    curAveFit->setText("Current Average Fitness:");
//    grid->addWidget(curAveFit,2,0);
//    QLabel * curAveFitNum = new QLabel();
//    curAveFitNum->setText("0");
//    grid->addWidget(curAveFitNum,2,1);

//    QLabel * AbsAveFit = new QLabel();
//    AbsAveFit->setText("Absolute Average Fitness:");
//    grid->addWidget(AbsAveFit,2,2);
//    QLabel * AbsAveFitNum = new QLabel();
//    AbsAveFitNum->setText("0");
//    grid->addWidget(AbsAveFitNum,2,3);

//    QLabel * tb = new QLabel();
//    tb->setText("tb:");
//    grid->addWidget(tb,3,0);
//    QLabel * tbNum = new QLabel();
//    tbNum->setText("0");
//    grid->addWidget(tbNum,3,1);

//    QLabel * dCritico = new QLabel();
//    dCritico->setText("Delta Critico:");
//    grid->addWidget(dCritico,3,2);
//    QLabel * dCriticoNum = new QLabel();
//    dCriticoNum->setText("0");
//    grid->addWidget(dCriticoNum,3,3);

//    QLabel * momPrimo = new QLabel();
//    momPrimo->setText("Momento del primo ordine:");
//    grid->addWidget(momPrimo,3,4);
//    QLabel * momPrimoNum = new QLabel();
//    momPrimoNum->setText("0");
//    grid->addWidget(momPrimoNum,3,5);

//    mainL->addLayout(grid);

    tab1->setLayout(mainL);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_newCalibrationProject_triggered()
{
    Dialog *dialog = new Dialog();
    dialog->setReadOnlyProjName(false);
    dialog->setMainWindow(this);
    dialog->show();
}

void MainWindow::myClick(QTreeWidgetItem *item, int column)
{
    QVariantList listParameter = xmlmanager->getAllElementsFromProjectName(item->data(0,Qt::UserRole).toString());
    if(listParameter.size() > 5){
        Dialog *dialog = new Dialog();
        dialog->setReadOnlyProjName(true);
        dialog->setParameters(listParameter);
        dialog->setMainWindow(this);
        dialog->show();
    }
}

void MainWindow::on_tabWidget_2_tabCloseRequested(int index)
{
    //    if((((SAKeController*) MainWindow::threads[index])->finish))
    //        ((SAKeController*) MainWindow::threads[index])->finish = false;

    if(!(((SAKeController*) MainWindow::threads[index])->getStop()))
        ((SAKeController*) MainWindow::threads[index])->stopThread();
    //    QThread::sleep(100);
    //    if((MainWindow::threads)[index]->isRunning ()){

    //        ((SAKeController*) MainWindow::threads[index])->stopThread();
    //        while(MainWindow::threads[index]->isRunning ()){

    //        }
    //    }
    //    MainWindow::threads.erase(MainWindow::threads.begin()+index);
    //    ui->tabWidget_2->removeTab(index);

    //    ui->tabWidget_2->widget(index)->close();
}

Ui::MainWindow *MainWindow::getUi() const
{
    return ui;
}




